@page "/salads"
@inject HttpClient HttpClient
@inject OrderState OrderState
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="main">
    <ul class="salad-cards">
        @if (salads is not null)
        {
            @foreach (var salad in salads)
            {
                <li @onclick="@(() => OrderState.ShowConfigureSaladDialog(salad))" style="background-image: url('@salad.ImageUrl')">
                    <div class="salad-info">
                        <span class="title">@salad.Name</span>
                        @salad.Description
                        <span class="price">@salad.GetFormattedTotalPrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (Order.Salads.Any() || Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Tu pedido</h2>

            @foreach (var configuredSalad in Order.Salads)
            {
                <ConfiguredSaladItem Salad="configuredSalad" OnRemoved="@(() => RemoveSalad(configuredSalad))" />
            }
            @foreach (var configuredPizza in Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemovePizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Elige algo<br>para comenzar</div>
    }

    <div class="order-total @(Order.Salads.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@Order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(Order.Salads.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Pedir >
        </a>
    </div>
</div>

<TemplatedDialog Show="OrderState.ShowingConfigureDialog">
    <ConfigureSaladDialog
        Salad="OrderState.ConfiguringSalad"
        OnCancel="OrderState.CancelConfigureSaladDialog"
        OnConfirm="OrderState.ConfirmConfigureSaladDialog" />
</TemplatedDialog>

@code {
    List<Salad>? salads;
    Order Order => OrderState.Order;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            salads = await HttpClient.GetFromJsonAsync<List<Salad>>("salads");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine("Error cargando ensaladas: " + ex.Message);
        }
    }

    async Task RemoveSalad(Salad configuredSalad)
    {
        if (await JS.InvokeAsync<bool>("confirm", $"¿Eliminar {configuredSalad.Name} de tu pedido?"))
        {
            OrderState.RemoveConfiguredSalad(configuredSalad);
        }
    }

    async Task RemovePizza(Pizza configuredPizza)
    {
        if (await JS.Confirm($"Remove {configuredPizza.Special?.Name} pizza from the order?"))
        {
            OrderState.RemoveConfiguredPizza(configuredPizza);
        }
    }
}